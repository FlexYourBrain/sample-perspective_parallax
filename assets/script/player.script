-- Bopz character controls

-- these are the tweaks for the mechanics, feel free to change them for a different feeling
-- acceleration factor to use when air-borne
local air_acceleration_factor = 0.8
-- max speed right/left
local max_speed = 230
-- gravity pulling the player down in pixel units
local gravity = -1900
-- take-off speed when jumping in pixel units
local jump_takeoff_speed = 1200
-- hflip boolean for sprite facing left(true) or right(false)
local flip = false
-- max run speed
local max_run_speed = 600

-- pre-hashing ids improves performance
local msg_contact_point_response = hash("contact_point_response")
local msg_animation_done = hash("animation_done")
local group_obstacle = hash("ground")
local input_shift = hash("shift")
local input_left = hash("left")
local input_right = hash("right")
local input_jump = hash("jump")
local anim_walk = hash("walk")
local anim_idle = hash("idle")
local anim_jump = hash("jump")
local anim_fall = hash("fall")
local anim_run = hash("run")
local url_shadow = hash("/shadow")
local url_bopz = hash("/Bopz")

function init(self)
	-- this lets us handle input in this script
	msg.post(".", "acquire_input_focus")

	-- initial player velocity
	self.velocity = vmath.vector3(0, 0, 0)
	-- support variable to keep track of collisions and separation
	self.correction = vmath.vector3()
	-- if the player stands on ground or not
	self.ground_contact = false
	-- the currently playing animation
	self.anim = nil
	-- Shift boolean
	self.shift_pressed = false

end

local function play_animation(self, anim)
	-- only play animations which are not already playing
	if self.anim ~= anim then
		-- tell the sprite to play the animation
		sprite.play_flipbook("#sprite", anim)
		-- remember which animation is playing
		self.anim = anim
	end
end

local function update_animations(self)
	-- make sure the right animation is playing
	if self.ground_contact then
		if self.velocity.x == 0 then
			play_animation(self, anim_idle)
		elseif self.velocity.x == max_speed or self.velocity.x == -max_speed then
			play_animation(self, anim_walk)
		else
			play_animation(self, anim_run)
		end
	else
		if self.velocity.y > 0 then
			play_animation(self, anim_jump)
		else
			play_animation(self, anim_fall)
		end
	end
end

function fixed_update(self, dt)
	local bopz_position = go.get_position(url_bopz)
	-- apply gravity
	self.velocity.y = self.velocity.y + gravity * dt
	
		-- move player
		if self.velocity == 0 then
		else
			local pos = go.get_position()
			pos = pos + self.velocity * dt
			go.set_position(pos)
		end

		-- update animations based on state (ground, air, move, idle and run)
		update_animations(self)
	-- reset volatile state
	self.correction = vmath.vector3()
	self.ground_contact = false
	self.wall_contact = false

	go.set_position(vmath.vector3(bopz_position.x, -273, 0), url_shadow)
end

-- https://defold.com/manuals/physics/#resolving-kinematic-collisions
local function handle_obstacle_contact(self, normal, distance)
	if distance > 0 then
		-- First, project the accumulated correction onto
		-- the penetration vector
		local proj = vmath.project(self.correction, normal * distance)
		if proj < 1 then
			-- Only care for projections that does not overshoot.
			local comp = (distance - distance * proj) * normal
			-- Apply compensation
			go.set_position(go.get_position() + comp)
			-- Accumulate correction done
			self.correction = self.correction + comp
		end
	end

	-- collided with a wall
	-- stop horizontal movement
	if math.abs(normal.x) > 0.5 then
		self.wall_contact = true
		self.velocity.x = 0
	end
	-- collided with the ground
	-- stop vertical movement
	if normal.y > 0.5 then
		self.ground_contact = true
		self.velocity.y = 0
	end
	-- collided with the ceiling
	-- stop vertical movement
	if normal.y < -0.7 then
		self.velocity.y = 0
	end
end

function on_message(self, message_id, message, sender)
	-- check if we received a contact point message
	if message_id == msg_contact_point_response then
		-- check that the object is something we consider an obstacle
		if message.group == group_obstacle then
			handle_obstacle_contact(self, message.normal, message.distance)
		end
	end
end

local function jump(self)
	-- only allow jump from ground
	-- (extend this with a counter to do things like double-jumps)
	if self.ground_contact then
		-- set take-off speed
		self.velocity.y = jump_takeoff_speed
		-- play animation
		play_animation(self, anim_jump)
		self.ground_contact = false
	end
end

local function abort_jump(self)
	-- cut the jump short if we are still going up
	if self.velocity.y > 0 then
		-- scale down the upwards speed
		self.velocity.y = self.velocity.y * 0.5
	end
end

local function walk(self, direction)
	if self.ground_contact then
		self.velocity.x = max_speed * direction
	else
		-- move slower in the air
		self.velocity.x = max_speed * air_acceleration_factor * direction
	end
end

local function run(self, direction)
	if self.ground_contact then
		self.velocity.x = max_run_speed * direction
	else
		-- move slower in the air
		self.velocity.x = max_run_speed * air_acceleration_factor * direction
	end
end

local function flip_sprite(bool)
	--Use hflip to make sprite face the correct direction
	sprite.set_hflip("#sprite", bool)
end

function on_input(self, action_id, action)

	if action_id == input_shift and action.pressed then
		self.shift_pressed = true
	elseif action_id == input_shift and action.released then
		self.shift_pressed = false
	end

	if action_id == input_left then
		if not flip then -- face character left
			flip = true
			flip_sprite(flip)
		end
		if not self.shift_pressed then
			walk(self, -action.value)
		else
			run(self, -action.value)
		end
	elseif action_id == input_right then
		if flip then -- face character right
			flip = false
			flip_sprite(flip)
		end
		if not self.shift_pressed then
			walk(self, action.value)
		else
			run(self, action.value)
		end
	elseif action_id == input_jump then
		if action.pressed then
			jump(self)
		elseif action.released then
			abort_jump(self)
		elseif action.released then
			walk(self, action.value)
		end
	end
end


